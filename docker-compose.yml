
services:
 # mosquitto:
  #  container_name: mosquitto
  #  image: eclipse-mosquitto:latest
    #ports:
    #  - "1883:1883"  # Standard MQTT port
   #   - "9001:9001"  # Websocket port
   # volumes:
     # - ./mosquitto/config:/mosquitto/config
    #  - ./mosquitto/data:/mosquitto/data
    #  - ./mosquitto/log:/mosquitto/log
    #  - ./mosquitto/config/entrypoint.sh:/docker-entrypoint.sh
    #entrypoint: /docker-entrypoint.sh
   # environment:
     # - MQTT_USERNAME=${MQTT_USERNAME}
   #   - MQTT_PASSWORD=${MQTT_PASSWORD}
   # restart: unless-stopped

  mariadb:
    container_name: mariadb
    image: mariadb:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./mariadb/mariadb_init:/docker-entrypoint-initdb.d
      - ./mariadb/mariadb_data:/var/lib/mysql
    ports:
      - "3306:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  java-backend:
    container_name: java-backend
    image: java-backend:latest
    build:
      context: ./java-backend   # Pfad zum Verzeichnis des Dockerfile des Java-Backends
      dockerfile: Dockerfile
    develop:
        watch:
            - action: rebuild
              path: ./java-backend
    ports:
      - "8080:8080"             # Port f√ºr die REST-API
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      MQTT_BROKER_URL: ${MQTT_BROKER_URL}  # new kommunikation with broker
      MQTT_PORT: ${MQTT_BROKER_PORT}
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
    depends_on:
     # mosquitto:
          #condition: service_started
      mariadb:
          condition: service_healthy
    restart: unless-stopped

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: mariadb
      MYSQL_ROOT_PASSWORD: simon1234!
    ports:
      - "8081:80"
    depends_on:
      - mariadb
    restart: unless-stopped



  nginx-frontend:
    container_name: nginx-frontend
    volumes:
      - ./nginx-frontend/conf.d:/etc/nginx/conf.d     # Stelle sicher, dass die Konfigurationsdatei vorhanden ist
      - ./frontend:/usr/share/nginx/html              # Frontend-Verzeichnis als Volume
    image: nginx:latest
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS (konfiguriere SSL entsprechend)
    environment:
        MQTT_BROKER_URL: ${MQTT_BROKER_URL}
        MQTT_BROKER_PORT: ${MQTT_BROKER_PORT}
        MQTT_USERNAME: ${MQTT_USERNAME}
        MQTT_PASSWORD: ${MQTT_PASSWORD}
        MQTT_MESSAGE_PREFIX: ${MQTT_MESSAGE_PREFIX}

    #depends_on:
      #java-backend : # nicht auskommentiert
      # condition: service_started # neue
    restart: unless-stopped
  nginx-web-controller:
    container_name: nginx-web-controller
    image: nginx:latest
    volumes:
      - ./nginx-web-controller/conf.d:/etc/nginx/conf.d     # Stelle sicher, dass die Konfigurationsdatei vorhanden ist
      - ./web-controller:/usr/share/nginx/html              # Web-Controller-Verzeichnis als Volume
      - ./nginx-web-controller/entrypoint.sh:/docker-entrypoint.d/entrypoint.sh

    ports:
      - "81:81"    # HTTP
      - "444:443"  # HTTPS (konfiguriere SSL entsprechend)
    environment:
      MQTT_BROKER_URL:      ${MQTT_BROKER_URL}
      MQTT_BROKER_PORT:     ${MQTT_BROKER_PORT}
      MQTT_USERNAME:        ${MQTT_USERNAME}
      MQTT_PASSWORD:        ${MQTT_PASSWORD}
      MQTT_MESSAGE_PREFIX:  ${MQTT_MESSAGE_PREFIX}
    restart: unless-stopped

  swagger-ui:
      image: swaggerapi/swagger-ui:latest
      container_name: swagger-ui
      ports:
        - "8082:8080"
      volumes:
        - /home/junior/Dokumente/InfProjekt/Gruppe24/swagger:/foo
      environment:
        - SWAGGER_JSON=/foo/swagger.json
      restart: unless-stopped

networks:
  default:
    name: simon-network

